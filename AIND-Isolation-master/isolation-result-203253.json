{
    "critiques": {
        "680": {
            "rubric_items": {
                "5510": {
                    "result": "failed",
                    "observation": "Not all of the tests passed.\n\n```\n************************************************************************\n                         Test Failure Feedback                          \n************************************************************************\n\nFailed Test: 2. Test functionality of MinimaxPlayer.minimax()\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 247, in minimax\n    return max(game.get_legal_moves(), key=lambda m: min_value(game.forecast_move(m)))\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 247, in <lambda>\n    return max(game.get_legal_moves(), key=lambda m: min_value(game.forecast_move(m)))\n\n                     ...lines elided for space...                     \n\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 246, in max_value\n    v=max(v, min_value(game.forecast_move(m)))\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 236, in min_value\n    v=min(v, max_value(game.forecast_move(m)))\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 246, in max_value\n    v=max(v, min_value(game.forecast_move(m)))\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 236, in min_value\n    v=min(v, max_value(game.forecast_move(m)))\n  File \"/home/grader/isolation/testcases.py\", line 354, in forecast_move\n    new_board = self.copy()\n  File \"/home/grader/isolation/testcases.py\", line 339, in copy\n    width=self.width, height=self.height)\n  File \"/home/grader/isolation/testcases.py\", line 331, in __init__\n    self.counter = Counter()\n  File \"/usr/lib/python3.5/collections/__init__.py\", line 530, in __init__\n    self.update(*args, **kwds)\n  File \"/usr/lib/python3.5/collections/__init__.py\", line 604, in update\n    self, *args = args\nRecursionError: maximum recursion depth exceeded while calling a Python object\n\n\nFailed Test: 3. Test that minimax() raises SearchTimeout when the timer expires\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 247, in minimax\n    return max(game.get_legal_moves(), key=lambda m: min_value(game.forecast_move(m)))\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 247, in <lambda>\n    return max(game.get_legal_moves(), key=lambda m: min_value(game.forecast_move(m)))\n\n                     ...lines elided for space...                     \n\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 236, in min_value\n    v=min(v, max_value(game.forecast_move(m)))\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 246, in max_value\n    v=max(v, min_value(game.forecast_move(m)))\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 236, in min_value\n    v=min(v, max_value(game.forecast_move(m)))\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 242, in max_value\n    if terminal_test(game):\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 224, in terminal_test\n    return not bool(game.get_legal_moves())\n  File \"/home/grader/isolation/isolation/isolation.py\", line 339, in get_legal_moves\n    return self.__get_moves(self.get_player_location(player))\n  File \"/home/grader/isolation/isolation/isolation.py\", line 408, in __get_moves\n    valid_moves = [(r + dr, c + dc) for dr, dc in directions\n  File \"/home/grader/isolation/isolation/isolation.py\", line 409, in <listcomp>\n    if self.move_is_legal((r + dr, c + dc))]\n  File \"/home/grader/isolation/isolation/isolation.py\", line 284, in move_is_legal\n    return (0 <= move[0] < self.height and 0 <= move[1] < self.width and\nRecursionError: maximum recursion depth exceeded in comparison\n\n\nFailed Test: 5. Test interface of AlphaBetaPlayer.alphabeta()\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 340, in alphabeta\n    raise NotImplementedError\nNotImplementedError\n\n\nFailed Test: 6. Test the interface of AlphaBetaPlayer.get_move()\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 289, in get_move\n    raise NotImplementedError\nNotImplementedError\n\n\nFailed Test: 7. Test functionality of AlphaBetaPlayer.alphabeta()\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 340, in alphabeta\n    raise NotImplementedError\nNotImplementedError\n\n\nFailed Test: 8. Test that alphabeta() raises SearchTimeout when the timer expires\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 340, in alphabeta\n    raise NotImplementedError\nNotImplementedError\n\n\nFailed Test: 9. Test iterative deepening in AlphaBetaPlayer.get_move()\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 289, in get_move\n    raise NotImplementedError\nNotImplementedError\n\n\nFailed Test: 10. Test that AlphaBetaPlayer successfully plays a full game\n----------------------------------------------------------------------\nTraceback (most recent call last):\nNotImplementedError\n\nDuring handling of the above exception, another exception occurred:\n\nAssertionError: Your agent raised an error while attempting to play a complete game against another agent.  Make sure that your agent can play an entire game -- including selecting initial moves on an empty board.\nException: \n\n\nFailed Test: 11. Test output interface of custom_score()\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 38, in custom_score\n    raise NotImplementedError\nNotImplementedError\n\n\nFailed Test: 12. Test output interface of custom_score_2()\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 64, in custom_score_2\n    raise NotImplementedError\nNotImplementedError\n\n\nFailed Test: 13. Test output interface of custom_score_3()\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 90, in custom_score_3\n    raise NotImplementedError\nNotImplementedError\n\n\n************************************************************************\n                          Test Result Summary                           \n************************************************************************\n\n1. Test output interface of MinimaxPlayer.minimax():                   .\n2. Test functionality of MinimaxPlayer.minimax():                      E\n3. Test that minimax() raises SearchTimeout when the timer expires:    E\n4. Test that MinimaxPlayer successfully plays a full game:             .\n5. Test interface of AlphaBetaPlayer.alphabeta():                      E\n6. Test the interface of AlphaBetaPlayer.get_move():                   E\n7. Test functionality of AlphaBetaPlayer.alphabeta():                  E\n8. Test that alphabeta() raises SearchTimeout when the timer expires:  E\n9. Test iterative deepening in AlphaBetaPlayer.get_move():             E\n10. Test that AlphaBetaPlayer successfully plays a full game:          F\n11. Test output interface of custom_score():                           E\n12. Test output interface of custom_score_2():                         E\n13. Test output interface of custom_score_3():                         E\n\n------------------------------------------------------------------------\n            . - Test Passed    F - Test Failed    E - Error             \n\n```"
                },
                "7303": {
                    "result": "failed",
                    "observation": "Not all of the tests passed.\n\n```\n************************************************************************\n                         Test Failure Feedback                          \n************************************************************************\n\nFailed Test: 14. Submission includes heuristic_analysis.pdf\n----------------------------------------------------------------------\nAssertionError: False is not true : You must submit a report named heuristic_analysis.pdf for review.\n\n\nFailed Test: 15. Submission includes research_review.pdf\n----------------------------------------------------------------------\nAssertionError: False is not true : You must submit a report named research_review.pdf for review.\n\n\n************************************************************************\n                          Test Result Summary                           \n************************************************************************\n\n14. Submission includes heuristic_analysis.pdf:                        F\n15. Submission includes research_review.pdf:                           F\n\n------------------------------------------------------------------------\n            . - Test Passed    F - Test Failed    E - Error             \n\n```"
                }
            }
        }
    }
}